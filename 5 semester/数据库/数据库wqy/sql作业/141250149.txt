141250149 吴秦月1.a	查询每个年级学生的总数量 (grade, studentCnt)SELECT grade,count(*) studentCnt from student group by grade;1.b  查询学生“Sara”的所有课程和得分(courseId, courseName, score)select course.cid courseId,course.name courseName, score from `select`,course,student wherestudent.name="Sara" and `select`.cid=course.cid and student.sid=`select`.sid;1.c	查询2013级学生的总分排名，并按照总分降序排序（考虑重修以最新成绩为准）(studentId, studentName, totalScore)SELECT student.sid studentId, student.name studentName, sum(validStu.validScore) totalScore		 FROM student, 			 (SELECT `select`.cid courseId, `select`.sid stuId, max(year) latestYear, score validScore 			  FROM `select` 			  GROUP BY cid,sid) 			  validStu		 WHERE student.grade="2013" and student.sid=validStu.stuId 		 GROUP BY sid 		 ORDER BY totalScore DESC;1.d	查询2013级学生所有课程成绩均为优秀的学生列表 (studentId, studentName)（1）如果只要有null就不算全优select student.sid studentId,name studentName from student,`select`where grade=2013 and student.sid=`select`.sid and  not exists (select * from `select` where (score<90 or score is null) and`select`.sid=student.sid);（2）如果有null也算优秀SELECT student.sid studentId, student.name studentName		 FROM student		 WHERE student.grade="2013" and student.sid IN (			 SELECT sid			 FROM `select` select1			 WHERE select1.score>=90			 )			 and student.sid NOT IN			(SELECT sid 			 FROM `select` select2			 WHERE student.sid=select2.sid and (select2.score<90)			);1.e 查询2015年选择课程“离散数学”的学生的姓名及成绩，先按课程号排序，再分课程按成绩降序排序 select course.cid courseId,student.sid studentId,student.name studentName, scorefrom student,`select` ,course whereyear=2015 and course.name="离散数学" and student.sid=`select`.sidand `select`.cid=course.cid order by `select`.cid , score DESC;1.f 查询2015年各课程最高分的学生及得分(courseId, courseName, studentId, studentName, score)select course.cid as courseId,course.name as courseName,student.sid as studentId,student.name as studentName,score
from course,`select`,student where course.cid = `select`.cid and `select`.sid = student.sid and `select`.`year` = 2015 and `select`.score is not null and score >=all(
select b.score from `select` b where b.cid = course.cid and b.year = 2015 and b.score is not null );
1.g	查询2015年所有课程和各自的选课人数(courseId, courseName, selectCnt)select course.cid courseId,course.name courseName,count(*) selectCntfrom student,`select`,coursewhere year=2015 and student.sid=`select`.sid and course.cid=`select`.cidgroup by courseId;1.h	查询2015年不及格人数最多的课程名称及挂科人数(courseId, courseName, failedCnt)select course.cid courseId, name courseName,fail failedCntfrom course,(select `select`.cid,count(*) as fail from `select` where score<60 and year=2015 group by cid) xwhere course.cid=x.cid and fail >=all (select count(*) from `select` where score<60 and year=2015 group by cid);1.i	查询各年课程号为233的平均分，按照选课时间从后向前排序(year, avgScore)select year, avg(score) avgScorefrom `select`where cid=233 group by year order by year DESC;1.j	查询老师“Steven”教授的所有课程的合格率(courseId, courseName, passRate)select pass.cid courseId,pass.name courseName, pass.num/allNum.num passRatefrom (select course.cid,count(*) num ,course.name from`select`,teacher,coursewhere teacher.name="Steven" and course.tid=teacher.tid and `select`.cid=course.cid and score>=60 group by cid) pass,(select course.cid,count(*) num from`select`,teacher,coursewhere teacher.name="Steven" and course.tid=teacher.tid and `select`.cid=course.cid and score is not null group by cid) allNumwhere pass.cid=allNum.cid;1.k	查询在2015年同时选择“离散数学”和“微积分”两门课程的学生姓名列表SELECT student.sid studentId, student.name studentName FROM student, `select`, course WHERE course.name="离散数学" and course.cid=`select`.cid and student.sid=`select`.sid and `select`.year="2015" and EXISTS (SELECT * FROM student student1, `select` select1, course course1  WHERE course1.name="微积分" and course1.cid=select1.cid and student1.sid=select1.sid and `select`.year="2015" and student.sid=student1.sid );
1.l	查询在2015年选课数量大于3门的学生姓名列表和选课数量(studentId, studentName, selectCnt)select student.sid studentId,student.name studentName,count(*) selectCntfrom student,`select`where student.sid=`select`.sid and year=2015 group by student.sidhaving count(*)>3;2.a	现在除了t_comment表之外的其他表均已创建，请写出t_comment的建表命令DROP TABLE IF EXISTS `t_comment`;CREATE TABLE `t_comment`(`id` int(11) not null auto_increment,`content` text NOT NULL,`createdAt` datetime NOT NULL,`updatedAt` datetime NOT NULL,`deletedAt` datetime DEFAULT NULL,`topicId` int(11) DEFAULT NULL,`userId` int(11) DEFAULT NULL,`parentId` int(11) DEFAULT NULL,`rootId` int(11) DEFAULT NULL,PRIMARY KEY (`id`),KEY `topicId` (`topicId`),KEY `userId` (`userId`),KEY `parentId` (`parentId`),KEY `rootId` (`rootId`),CONSTRAINT `t_comment_ibfk_1` FOREIGN KEY (`topicId`) REFERENCES `t_topic` (`id`)ON DELETE SET NULL ON UPDATE CASCADE,CONSTRAINT `t_comment_ibfk_2` FOREIGN KEY (`userId`) REFERENCES `t_user` (`id`)ON DELETE SET NULL ON UPDATE CASCADE,CONSTRAINT `t_comment_ibfk_3` foreign key (`parentId`) references `t_comment` (`id`)ON DELETE SET NULL ON UPDATE CASCADE,CONSTRAINT `t_comment_ibfk_4` FOREIGN KEY (`ROOTiD`) references `t_comment` (`id`)ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB AUTO_INCREMENT=201 DEFAULT CHARSET=utf8;2.b	获取所有学校列表(id, name)select id, name from t_school;2.c	获取学校id为1的专业列表(id, name, createdat, updatedat, schoolid)select id, name, createdat, updatedat, schoolidfrom t_specialitywhere schoolid=1;2.d	获取专业id为1的课程列表（要求分页，每页10条，显示第2页，排序按照课程创建时间的倒序）(id, name, description, createdat, updatedat, specialityid)   select id, name, description, createdat, updatedat, specialityid   from t_course   where specialityId=1 order by createdAt DESC   limit 10,10;   2.e	课程搜索，关键词为“数据”，返回名称或描述中包含此关键词的课程，排序规则：名称包含的在先，内容包含的在后，分别按照课程创建的时间倒序（要求分页，每页5条，显示第一页）(id, name, description, createdat, updatedat, specialityid)
(select id, name, description, createdat, updatedat, specialityid
from t_course
where name like "%数据%"
order by createdAt desc limit 5) union
(select id, name, description, createdat, updatedat, specialityid
from t_course
where description like "%数据%" 
order by createdAt desc limit 5)
limit 0,5;2.f	获取id为1的课程详情、发布时间最早的topic、topic内容、作者详情(course.*, topics.*, topics.topic_body.*, topics.author.*)
select  *from t_course , t_topic , t_topic_body , t_authorwhere t_course.id=1 and t_topic.courseId=t_course.id and t_topic_body.topicId=t_topic.id and t_author.id=t_topic.authorId and t_topic.createdAt<= all(select t1.createdatfrom t_topic t1 where t1.courseId=t_topic.courseId);2.g	获取topic id为1的所有评论(id, content, createdat, updatedat, topicid, userid, parentid, rootid)select id, content, createdat, updatedat, topicid, userid, parentid, rootidfrom t_commentwhere topicId=1;2.h	系统上线一段时间后，发现需要对评论中的敏感词汇进行过滤，除了对后台逻辑的修改之外还需要对已有数据进行修改，请用“**”替换所有评论中出现的“中国”set sql_safe_updates=0;update t_commentset content=replace(content,"中国","**") ;2.i	目前要奖励提供topic数量达到前十位的作者，请写出查询语句(author.*, topicCount)select t_author.id,t_author.name,t_author.icon,t_author.avatar,t_author.phone,t_author.email,t_author.qq,t_author.wechat,t_author.introduction,t_author.createdAt,t_author.updatedAt,count(*) topicCountfrom t_author,t_topicwhere t_topic.authorId=t_author.id group by t_topic.authorIdorder by count(*) DESC LIMIT 0,10;2.J	系统上线一段时间后，运营需要了解参与作者数量情况，以进行重点宣传，请写出查询语句，返回学校的id，name以及作者数量authorCount，并按照作者数量从小到大排序(schoolid, schoolname, authorCount)SELECT t_school.id schoolid, t_school.name schoolname, count(*) authorCount		 FROM t_school, t_author 		 WHERE t_author.id IN 		 (SELECT t_topic.authorId 			FROM t_topic 			WHERE t_topic.courseId IN				(SELECT t_course.id 				FROM t_course 				WHERE t_course.specialityId IN					(SELECT t_speciality.id 					FROM t_speciality 					WHERE t_speciality.schoolId IN						(SELECT t_school.id 						FROM t_school t_school1 						WHERE t_school1.id=t_school.id)					)				)			)		 GROUP BY t_school.id 		 ORDER BY count(*) ASC;2.k 	现在需要挑选出优秀的topic做成专辑向用户推送，现在需要挑选出topic中使用图片素材和音频素材总数量超过5个的topic来筛选，请写出查询语句(id, name, createdat, updatedat, courseid, authorid)select t_topic.id, t_topic.name, t_topic.createdat, t_topic.updatedat, t_topic.courseid, t_topic.authoridfrom t_topic,t_assetwhere (t_asset.type="image" or  t_asset.type="audio") and t_topic.id in(select t_topic_body.topicId from t_topic_bodywhere t_topic_body.id in(select t_asset__topic_body.TOPICBODYID from t_asset__topic_bodywhere t_asset__topic_body.assetId in(select  id from t_asset  A where A.id=t_asset.id )))group by t_topic.idhaving count(*)>5;2.l	如果现在没有t_asset表来记录素材使用情况，但可以确定在t_topic_body的content中，所有的图片素材模式为<img src="***">音频素材模式为<audio controls src="***.mp3" type="audio/mpeg">抱歉，您的浏览器不支持</audio>请在此条件下完成上一题的任务(id, name, createdat, updatedat, courseid, authorid)SELECT t_topic.id id,t_topic.name name,t_topic.createdAt createdAt,t_topic.updatedAt updatedAt,t_topic.courseId courseid,t_topic.authorId authorid ,t_topic_body.content		 FROM t_topic,t_topic_body 		 WHERE t_topic.id=t_topic_body.topicId and t_topic_body.content 		 REGEXP '((.*<img src=".*">.*)|(.*<audio controls src=".*\\.mp3" type="audio/mpeg">抱歉，您的浏览器不支持</audio>.*)){6,}';